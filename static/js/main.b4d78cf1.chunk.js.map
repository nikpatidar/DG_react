{"version":3,"sources":["components/app.js","actions/actionTypes.js","reducers/contentListReducer.js","reducers/rootReducer.js","reportWebVitals.js","store/configureStore.js","index.js"],"names":["App","useState","allData","setAllData","searchTerm","setSearchTerm","contentList","useSelector","state","useEffect","page","content_items","content","className","src","alt","type","onChange","event","value","target","toLowerCase","result","filter","data","name","search","console","log","placeholder","total_content_items","map","v","i","actionTypes","contentListReducer","contentJson","action","rootReducer","combineReducers","initialState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"o4CAsDeA,EAnDH,WACR,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAoCF,mBAASC,GAA7C,mBAAOE,EAAP,KAAmBC,EAAnB,KACMC,EAAcC,aAAY,SAACC,GAAD,OAAWA,EAAMF,eAGjDG,qBAAU,WACNN,EAAWG,EAAYI,KAAKC,cAAcC,SAC1CP,EAAcC,EAAYI,KAAKC,cAAcC,WAE9C,CAACR,IAWJ,OACI,sBAAKS,UAAU,iFAAf,UACI,yBAAQA,UAAU,OAAlB,UACI,wBAAQA,UAAU,eAAlB,SACI,qBAAKC,IAAI,kBAAkBC,IAAI,OAEnC,qBAAKF,UAAU,GAAf,SACI,uBAAOG,KAAK,OACRC,SAjBC,SAAAC,GACjB,IAAIC,EAAQD,EAAME,OAAOD,MAAME,cAC3BC,EAASpB,EAAQqB,QAAO,SAACC,GACzB,OAAoC,IAA7BA,EAAKC,KAAKC,OAAOP,MAE5BQ,QAAQC,IAAIN,GACZjB,EAAciB,IAYET,UAAU,6DACVgB,YAAY,4BAGxB,8BACI,qBAAKhB,UAAU,yBAAf,SAC8C,IAAzCP,EAAYI,KAAKoB,oBACd1B,EAAW2B,KAAI,SAACC,EAAGC,GAAJ,OACX,sBAAapB,UAAU,MAAvB,UACI,qBAAKC,IAAI,qBAAqBC,IAAI,KAClC,4BAAIiB,EAAEP,SAFAQ,MAKd,yD,eC9CXC,EACK,oB,QCWHC,EATY,WAAkC,IAAjC3B,EAAgC,uDAAxB4B,EAAaC,EAAW,uCACxD,OAAQA,EAAOrB,MACX,KAAKkB,EACD,OAAO,YAAI1B,GACf,QACI,OAAOA,ICDJ8B,EAJKC,YAAgB,CAChCjC,YAAa6B,ICJjB,ICG+BK,EDShBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OEERQ,EDLKC,YAAYb,EAAaE,GCOpCY,IAASC,OACP,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFI,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.b4d78cf1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst App = () => {\r\n    const [allData, setAllData] = useState([]);\r\n    const [searchTerm, setSearchTerm] = useState(allData);\r\n    const contentList = useSelector((state) => state.contentList);\r\n\r\n     // eslint-disable-next-line\r\n    useEffect(() => {\r\n        setAllData(contentList.page.content_items.content);\r\n        setSearchTerm(contentList.page.content_items.content);\r\n         // eslint-disable-next-line\r\n    }, [searchTerm]);\r\n\r\n    const handleChange = event => {\r\n        let value = event.target.value.toLowerCase();\r\n        let result = allData.filter((data) => {\r\n            return data.name.search(value) !== -1;\r\n        });\r\n        console.log(result);\r\n        setSearchTerm(result);\r\n    };\r\n\r\n    return (\r\n        <div className=\"min-w-0 w-full flex-auto lg:static lg:max-h-full lg:overflow-visible customCon\">\r\n            <header className=\"flex\">\r\n                <button className=\"flex backBtn\">\r\n                    <img src=\"assets/Back.png\" alt=\"\" />\r\n                </button>\r\n                <div className=\"\">\r\n                    <input type=\"text\"\r\n                        onChange={handleChange}\r\n                        className=\"h-14 pr-8 pl-5 rounded z-0 focus:shadow focus:outline-none\"\r\n                        placeholder=\"Search anything...\" />\r\n                </div>\r\n            </header>\r\n            <div>\r\n                <div className=\"grid grid-cols-3 gap-4\">\r\n                    {contentList.page.total_content_items !== 0 ? (\r\n                        searchTerm.map((v, i) => (\r\n                            <div key={i} className=\"box\">\r\n                                <img src=\"assets/poster1.jpg\" alt=\"\" />\r\n                                <p>{v.name}</p>\r\n                            </div>\r\n                        ))\r\n                    ) : <div>Data Not Found</div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","export const actionTypes = {\r\n    fetchContent: 'FETCH_CONTENTLIST',\r\n};","import { actionTypes } from '../actions/actionTypes';\r\nimport contentJson from \"../services/CONTENTLISTINGPAGE-PAGE1.json\";\r\n\r\nconst contentListReducer = (state = contentJson, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.fetchContent:\r\n            return [...state];\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default contentListReducer;","import { combineReducers } from 'redux';\r\nimport contentListReducer from './contentListReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    contentList: contentListReducer\r\n});\r\n\r\nexport default rootReducer;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStore } from 'redux';\r\nimport rootReducer from '../reducers/rootReducer';\r\n\r\nexport function configureStore(initialState) {\r\n    return createStore(rootReducer, initialState);\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './styles/tailwind.css';\r\nimport App from './components/app';\r\nimport { configureStore } from './store/configureStore';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}